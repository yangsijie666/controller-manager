// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/yangsijie666/controller-manager/pkg/resourcelock/sqllock/ent/leaderelect"
	"github.com/yangsijie666/controller-manager/pkg/resourcelock/sqllock/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeLeaderElect = "LeaderElect"
)

// LeaderElectMutation represents an operation that mutates the LeaderElect nodes in the graph.
type LeaderElectMutation struct {
	config
	op                        Op
	typ                       string
	id                        *string
	resource_version          *string
	lease_duration_seconds    *int
	addlease_duration_seconds *int
	acquire_time              *int64
	addacquire_time           *int64
	renew_time                *int64
	addrenew_time             *int64
	leader_transitions        *int
	addleader_transitions     *int
	holder_identity           *string
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*LeaderElect, error)
	predicates                []predicate.LeaderElect
}

var _ ent.Mutation = (*LeaderElectMutation)(nil)

// leaderelectOption allows management of the mutation configuration using functional options.
type leaderelectOption func(*LeaderElectMutation)

// newLeaderElectMutation creates new mutation for the LeaderElect entity.
func newLeaderElectMutation(c config, op Op, opts ...leaderelectOption) *LeaderElectMutation {
	m := &LeaderElectMutation{
		config:        c,
		op:            op,
		typ:           TypeLeaderElect,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLeaderElectID sets the ID field of the mutation.
func withLeaderElectID(id string) leaderelectOption {
	return func(m *LeaderElectMutation) {
		var (
			err   error
			once  sync.Once
			value *LeaderElect
		)
		m.oldValue = func(ctx context.Context) (*LeaderElect, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().LeaderElect.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLeaderElect sets the old LeaderElect of the mutation.
func withLeaderElect(node *LeaderElect) leaderelectOption {
	return func(m *LeaderElectMutation) {
		m.oldValue = func(context.Context) (*LeaderElect, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LeaderElectMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LeaderElectMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of LeaderElect entities.
func (m *LeaderElectMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LeaderElectMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LeaderElectMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().LeaderElect.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetResourceVersion sets the "resource_version" field.
func (m *LeaderElectMutation) SetResourceVersion(s string) {
	m.resource_version = &s
}

// ResourceVersion returns the value of the "resource_version" field in the mutation.
func (m *LeaderElectMutation) ResourceVersion() (r string, exists bool) {
	v := m.resource_version
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceVersion returns the old "resource_version" field's value of the LeaderElect entity.
// If the LeaderElect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaderElectMutation) OldResourceVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceVersion: %w", err)
	}
	return oldValue.ResourceVersion, nil
}

// ResetResourceVersion resets all changes to the "resource_version" field.
func (m *LeaderElectMutation) ResetResourceVersion() {
	m.resource_version = nil
}

// SetLeaseDurationSeconds sets the "lease_duration_seconds" field.
func (m *LeaderElectMutation) SetLeaseDurationSeconds(i int) {
	m.lease_duration_seconds = &i
	m.addlease_duration_seconds = nil
}

// LeaseDurationSeconds returns the value of the "lease_duration_seconds" field in the mutation.
func (m *LeaderElectMutation) LeaseDurationSeconds() (r int, exists bool) {
	v := m.lease_duration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldLeaseDurationSeconds returns the old "lease_duration_seconds" field's value of the LeaderElect entity.
// If the LeaderElect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaderElectMutation) OldLeaseDurationSeconds(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLeaseDurationSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLeaseDurationSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeaseDurationSeconds: %w", err)
	}
	return oldValue.LeaseDurationSeconds, nil
}

// AddLeaseDurationSeconds adds i to the "lease_duration_seconds" field.
func (m *LeaderElectMutation) AddLeaseDurationSeconds(i int) {
	if m.addlease_duration_seconds != nil {
		*m.addlease_duration_seconds += i
	} else {
		m.addlease_duration_seconds = &i
	}
}

// AddedLeaseDurationSeconds returns the value that was added to the "lease_duration_seconds" field in this mutation.
func (m *LeaderElectMutation) AddedLeaseDurationSeconds() (r int, exists bool) {
	v := m.addlease_duration_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetLeaseDurationSeconds resets all changes to the "lease_duration_seconds" field.
func (m *LeaderElectMutation) ResetLeaseDurationSeconds() {
	m.lease_duration_seconds = nil
	m.addlease_duration_seconds = nil
}

// SetAcquireTime sets the "acquire_time" field.
func (m *LeaderElectMutation) SetAcquireTime(i int64) {
	m.acquire_time = &i
	m.addacquire_time = nil
}

// AcquireTime returns the value of the "acquire_time" field in the mutation.
func (m *LeaderElectMutation) AcquireTime() (r int64, exists bool) {
	v := m.acquire_time
	if v == nil {
		return
	}
	return *v, true
}

// OldAcquireTime returns the old "acquire_time" field's value of the LeaderElect entity.
// If the LeaderElect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaderElectMutation) OldAcquireTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAcquireTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAcquireTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAcquireTime: %w", err)
	}
	return oldValue.AcquireTime, nil
}

// AddAcquireTime adds i to the "acquire_time" field.
func (m *LeaderElectMutation) AddAcquireTime(i int64) {
	if m.addacquire_time != nil {
		*m.addacquire_time += i
	} else {
		m.addacquire_time = &i
	}
}

// AddedAcquireTime returns the value that was added to the "acquire_time" field in this mutation.
func (m *LeaderElectMutation) AddedAcquireTime() (r int64, exists bool) {
	v := m.addacquire_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetAcquireTime resets all changes to the "acquire_time" field.
func (m *LeaderElectMutation) ResetAcquireTime() {
	m.acquire_time = nil
	m.addacquire_time = nil
}

// SetRenewTime sets the "renew_time" field.
func (m *LeaderElectMutation) SetRenewTime(i int64) {
	m.renew_time = &i
	m.addrenew_time = nil
}

// RenewTime returns the value of the "renew_time" field in the mutation.
func (m *LeaderElectMutation) RenewTime() (r int64, exists bool) {
	v := m.renew_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRenewTime returns the old "renew_time" field's value of the LeaderElect entity.
// If the LeaderElect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaderElectMutation) OldRenewTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRenewTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRenewTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRenewTime: %w", err)
	}
	return oldValue.RenewTime, nil
}

// AddRenewTime adds i to the "renew_time" field.
func (m *LeaderElectMutation) AddRenewTime(i int64) {
	if m.addrenew_time != nil {
		*m.addrenew_time += i
	} else {
		m.addrenew_time = &i
	}
}

// AddedRenewTime returns the value that was added to the "renew_time" field in this mutation.
func (m *LeaderElectMutation) AddedRenewTime() (r int64, exists bool) {
	v := m.addrenew_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetRenewTime resets all changes to the "renew_time" field.
func (m *LeaderElectMutation) ResetRenewTime() {
	m.renew_time = nil
	m.addrenew_time = nil
}

// SetLeaderTransitions sets the "leader_transitions" field.
func (m *LeaderElectMutation) SetLeaderTransitions(i int) {
	m.leader_transitions = &i
	m.addleader_transitions = nil
}

// LeaderTransitions returns the value of the "leader_transitions" field in the mutation.
func (m *LeaderElectMutation) LeaderTransitions() (r int, exists bool) {
	v := m.leader_transitions
	if v == nil {
		return
	}
	return *v, true
}

// OldLeaderTransitions returns the old "leader_transitions" field's value of the LeaderElect entity.
// If the LeaderElect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaderElectMutation) OldLeaderTransitions(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLeaderTransitions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLeaderTransitions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLeaderTransitions: %w", err)
	}
	return oldValue.LeaderTransitions, nil
}

// AddLeaderTransitions adds i to the "leader_transitions" field.
func (m *LeaderElectMutation) AddLeaderTransitions(i int) {
	if m.addleader_transitions != nil {
		*m.addleader_transitions += i
	} else {
		m.addleader_transitions = &i
	}
}

// AddedLeaderTransitions returns the value that was added to the "leader_transitions" field in this mutation.
func (m *LeaderElectMutation) AddedLeaderTransitions() (r int, exists bool) {
	v := m.addleader_transitions
	if v == nil {
		return
	}
	return *v, true
}

// ResetLeaderTransitions resets all changes to the "leader_transitions" field.
func (m *LeaderElectMutation) ResetLeaderTransitions() {
	m.leader_transitions = nil
	m.addleader_transitions = nil
}

// SetHolderIdentity sets the "holder_identity" field.
func (m *LeaderElectMutation) SetHolderIdentity(s string) {
	m.holder_identity = &s
}

// HolderIdentity returns the value of the "holder_identity" field in the mutation.
func (m *LeaderElectMutation) HolderIdentity() (r string, exists bool) {
	v := m.holder_identity
	if v == nil {
		return
	}
	return *v, true
}

// OldHolderIdentity returns the old "holder_identity" field's value of the LeaderElect entity.
// If the LeaderElect object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeaderElectMutation) OldHolderIdentity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHolderIdentity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHolderIdentity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHolderIdentity: %w", err)
	}
	return oldValue.HolderIdentity, nil
}

// ResetHolderIdentity resets all changes to the "holder_identity" field.
func (m *LeaderElectMutation) ResetHolderIdentity() {
	m.holder_identity = nil
}

// Where appends a list predicates to the LeaderElectMutation builder.
func (m *LeaderElectMutation) Where(ps ...predicate.LeaderElect) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LeaderElectMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LeaderElectMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.LeaderElect, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LeaderElectMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LeaderElectMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (LeaderElect).
func (m *LeaderElectMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LeaderElectMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.resource_version != nil {
		fields = append(fields, leaderelect.FieldResourceVersion)
	}
	if m.lease_duration_seconds != nil {
		fields = append(fields, leaderelect.FieldLeaseDurationSeconds)
	}
	if m.acquire_time != nil {
		fields = append(fields, leaderelect.FieldAcquireTime)
	}
	if m.renew_time != nil {
		fields = append(fields, leaderelect.FieldRenewTime)
	}
	if m.leader_transitions != nil {
		fields = append(fields, leaderelect.FieldLeaderTransitions)
	}
	if m.holder_identity != nil {
		fields = append(fields, leaderelect.FieldHolderIdentity)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LeaderElectMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case leaderelect.FieldResourceVersion:
		return m.ResourceVersion()
	case leaderelect.FieldLeaseDurationSeconds:
		return m.LeaseDurationSeconds()
	case leaderelect.FieldAcquireTime:
		return m.AcquireTime()
	case leaderelect.FieldRenewTime:
		return m.RenewTime()
	case leaderelect.FieldLeaderTransitions:
		return m.LeaderTransitions()
	case leaderelect.FieldHolderIdentity:
		return m.HolderIdentity()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LeaderElectMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case leaderelect.FieldResourceVersion:
		return m.OldResourceVersion(ctx)
	case leaderelect.FieldLeaseDurationSeconds:
		return m.OldLeaseDurationSeconds(ctx)
	case leaderelect.FieldAcquireTime:
		return m.OldAcquireTime(ctx)
	case leaderelect.FieldRenewTime:
		return m.OldRenewTime(ctx)
	case leaderelect.FieldLeaderTransitions:
		return m.OldLeaderTransitions(ctx)
	case leaderelect.FieldHolderIdentity:
		return m.OldHolderIdentity(ctx)
	}
	return nil, fmt.Errorf("unknown LeaderElect field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LeaderElectMutation) SetField(name string, value ent.Value) error {
	switch name {
	case leaderelect.FieldResourceVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceVersion(v)
		return nil
	case leaderelect.FieldLeaseDurationSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeaseDurationSeconds(v)
		return nil
	case leaderelect.FieldAcquireTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAcquireTime(v)
		return nil
	case leaderelect.FieldRenewTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRenewTime(v)
		return nil
	case leaderelect.FieldLeaderTransitions:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLeaderTransitions(v)
		return nil
	case leaderelect.FieldHolderIdentity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHolderIdentity(v)
		return nil
	}
	return fmt.Errorf("unknown LeaderElect field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LeaderElectMutation) AddedFields() []string {
	var fields []string
	if m.addlease_duration_seconds != nil {
		fields = append(fields, leaderelect.FieldLeaseDurationSeconds)
	}
	if m.addacquire_time != nil {
		fields = append(fields, leaderelect.FieldAcquireTime)
	}
	if m.addrenew_time != nil {
		fields = append(fields, leaderelect.FieldRenewTime)
	}
	if m.addleader_transitions != nil {
		fields = append(fields, leaderelect.FieldLeaderTransitions)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LeaderElectMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case leaderelect.FieldLeaseDurationSeconds:
		return m.AddedLeaseDurationSeconds()
	case leaderelect.FieldAcquireTime:
		return m.AddedAcquireTime()
	case leaderelect.FieldRenewTime:
		return m.AddedRenewTime()
	case leaderelect.FieldLeaderTransitions:
		return m.AddedLeaderTransitions()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LeaderElectMutation) AddField(name string, value ent.Value) error {
	switch name {
	case leaderelect.FieldLeaseDurationSeconds:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLeaseDurationSeconds(v)
		return nil
	case leaderelect.FieldAcquireTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAcquireTime(v)
		return nil
	case leaderelect.FieldRenewTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRenewTime(v)
		return nil
	case leaderelect.FieldLeaderTransitions:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLeaderTransitions(v)
		return nil
	}
	return fmt.Errorf("unknown LeaderElect numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LeaderElectMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LeaderElectMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LeaderElectMutation) ClearField(name string) error {
	return fmt.Errorf("unknown LeaderElect nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LeaderElectMutation) ResetField(name string) error {
	switch name {
	case leaderelect.FieldResourceVersion:
		m.ResetResourceVersion()
		return nil
	case leaderelect.FieldLeaseDurationSeconds:
		m.ResetLeaseDurationSeconds()
		return nil
	case leaderelect.FieldAcquireTime:
		m.ResetAcquireTime()
		return nil
	case leaderelect.FieldRenewTime:
		m.ResetRenewTime()
		return nil
	case leaderelect.FieldLeaderTransitions:
		m.ResetLeaderTransitions()
		return nil
	case leaderelect.FieldHolderIdentity:
		m.ResetHolderIdentity()
		return nil
	}
	return fmt.Errorf("unknown LeaderElect field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LeaderElectMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LeaderElectMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LeaderElectMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LeaderElectMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LeaderElectMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LeaderElectMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LeaderElectMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown LeaderElect unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LeaderElectMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown LeaderElect edge %s", name)
}
