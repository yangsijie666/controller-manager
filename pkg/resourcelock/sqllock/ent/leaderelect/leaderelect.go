// Code generated by ent, DO NOT EDIT.

package leaderelect

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the leaderelect type in the database.
	Label = "leader_elect"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "name"
	// FieldResourceVersion holds the string denoting the resource_version field in the database.
	FieldResourceVersion = "resource_version"
	// FieldLeaseDurationSeconds holds the string denoting the lease_duration_seconds field in the database.
	FieldLeaseDurationSeconds = "lease_duration_seconds"
	// FieldAcquireTime holds the string denoting the acquire_time field in the database.
	FieldAcquireTime = "acquire_time"
	// FieldRenewTime holds the string denoting the renew_time field in the database.
	FieldRenewTime = "renew_time"
	// FieldLeaderTransitions holds the string denoting the leader_transitions field in the database.
	FieldLeaderTransitions = "leader_transitions"
	// FieldHolderIdentity holds the string denoting the holder_identity field in the database.
	FieldHolderIdentity = "holder_identity"
	// Table holds the table name of the leaderelect in the database.
	Table = "leader_election"
)

// Columns holds all SQL columns for leaderelect fields.
var Columns = []string{
	FieldID,
	FieldResourceVersion,
	FieldLeaseDurationSeconds,
	FieldAcquireTime,
	FieldRenewTime,
	FieldLeaderTransitions,
	FieldHolderIdentity,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultResourceVersion holds the default value on creation for the "resource_version" field.
	DefaultResourceVersion string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the LeaderElect queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceVersion orders the results by the resource_version field.
func ByResourceVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceVersion, opts...).ToFunc()
}

// ByLeaseDurationSeconds orders the results by the lease_duration_seconds field.
func ByLeaseDurationSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLeaseDurationSeconds, opts...).ToFunc()
}

// ByAcquireTime orders the results by the acquire_time field.
func ByAcquireTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcquireTime, opts...).ToFunc()
}

// ByRenewTime orders the results by the renew_time field.
func ByRenewTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRenewTime, opts...).ToFunc()
}

// ByLeaderTransitions orders the results by the leader_transitions field.
func ByLeaderTransitions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLeaderTransitions, opts...).ToFunc()
}

// ByHolderIdentity orders the results by the holder_identity field.
func ByHolderIdentity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHolderIdentity, opts...).ToFunc()
}
