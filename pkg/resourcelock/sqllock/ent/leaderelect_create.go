// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yangsijie666/controller-manager/pkg/resourcelock/sqllock/ent/leaderelect"
)

// LeaderElectCreate is the builder for creating a LeaderElect entity.
type LeaderElectCreate struct {
	config
	mutation *LeaderElectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetResourceVersion sets the "resource_version" field.
func (lec *LeaderElectCreate) SetResourceVersion(s string) *LeaderElectCreate {
	lec.mutation.SetResourceVersion(s)
	return lec
}

// SetNillableResourceVersion sets the "resource_version" field if the given value is not nil.
func (lec *LeaderElectCreate) SetNillableResourceVersion(s *string) *LeaderElectCreate {
	if s != nil {
		lec.SetResourceVersion(*s)
	}
	return lec
}

// SetLeaseDurationSeconds sets the "lease_duration_seconds" field.
func (lec *LeaderElectCreate) SetLeaseDurationSeconds(i int) *LeaderElectCreate {
	lec.mutation.SetLeaseDurationSeconds(i)
	return lec
}

// SetAcquireTime sets the "acquire_time" field.
func (lec *LeaderElectCreate) SetAcquireTime(i int64) *LeaderElectCreate {
	lec.mutation.SetAcquireTime(i)
	return lec
}

// SetRenewTime sets the "renew_time" field.
func (lec *LeaderElectCreate) SetRenewTime(i int64) *LeaderElectCreate {
	lec.mutation.SetRenewTime(i)
	return lec
}

// SetLeaderTransitions sets the "leader_transitions" field.
func (lec *LeaderElectCreate) SetLeaderTransitions(i int) *LeaderElectCreate {
	lec.mutation.SetLeaderTransitions(i)
	return lec
}

// SetHolderIdentity sets the "holder_identity" field.
func (lec *LeaderElectCreate) SetHolderIdentity(s string) *LeaderElectCreate {
	lec.mutation.SetHolderIdentity(s)
	return lec
}

// SetID sets the "id" field.
func (lec *LeaderElectCreate) SetID(s string) *LeaderElectCreate {
	lec.mutation.SetID(s)
	return lec
}

// Mutation returns the LeaderElectMutation object of the builder.
func (lec *LeaderElectCreate) Mutation() *LeaderElectMutation {
	return lec.mutation
}

// Save creates the LeaderElect in the database.
func (lec *LeaderElectCreate) Save(ctx context.Context) (*LeaderElect, error) {
	lec.defaults()
	return withHooks(ctx, lec.sqlSave, lec.mutation, lec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lec *LeaderElectCreate) SaveX(ctx context.Context) *LeaderElect {
	v, err := lec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lec *LeaderElectCreate) Exec(ctx context.Context) error {
	_, err := lec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lec *LeaderElectCreate) ExecX(ctx context.Context) {
	if err := lec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lec *LeaderElectCreate) defaults() {
	if _, ok := lec.mutation.ResourceVersion(); !ok {
		v := leaderelect.DefaultResourceVersion
		lec.mutation.SetResourceVersion(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lec *LeaderElectCreate) check() error {
	if _, ok := lec.mutation.ResourceVersion(); !ok {
		return &ValidationError{Name: "resource_version", err: errors.New(`ent: missing required field "LeaderElect.resource_version"`)}
	}
	if _, ok := lec.mutation.LeaseDurationSeconds(); !ok {
		return &ValidationError{Name: "lease_duration_seconds", err: errors.New(`ent: missing required field "LeaderElect.lease_duration_seconds"`)}
	}
	if _, ok := lec.mutation.AcquireTime(); !ok {
		return &ValidationError{Name: "acquire_time", err: errors.New(`ent: missing required field "LeaderElect.acquire_time"`)}
	}
	if _, ok := lec.mutation.RenewTime(); !ok {
		return &ValidationError{Name: "renew_time", err: errors.New(`ent: missing required field "LeaderElect.renew_time"`)}
	}
	if _, ok := lec.mutation.LeaderTransitions(); !ok {
		return &ValidationError{Name: "leader_transitions", err: errors.New(`ent: missing required field "LeaderElect.leader_transitions"`)}
	}
	if _, ok := lec.mutation.HolderIdentity(); !ok {
		return &ValidationError{Name: "holder_identity", err: errors.New(`ent: missing required field "LeaderElect.holder_identity"`)}
	}
	if v, ok := lec.mutation.ID(); ok {
		if err := leaderelect.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "LeaderElect.id": %w`, err)}
		}
	}
	return nil
}

func (lec *LeaderElectCreate) sqlSave(ctx context.Context) (*LeaderElect, error) {
	if err := lec.check(); err != nil {
		return nil, err
	}
	_node, _spec := lec.createSpec()
	if err := sqlgraph.CreateNode(ctx, lec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected LeaderElect.ID type: %T", _spec.ID.Value)
		}
	}
	lec.mutation.id = &_node.ID
	lec.mutation.done = true
	return _node, nil
}

func (lec *LeaderElectCreate) createSpec() (*LeaderElect, *sqlgraph.CreateSpec) {
	var (
		_node = &LeaderElect{config: lec.config}
		_spec = sqlgraph.NewCreateSpec(leaderelect.Table, sqlgraph.NewFieldSpec(leaderelect.FieldID, field.TypeString))
	)
	_spec.OnConflict = lec.conflict
	if id, ok := lec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := lec.mutation.ResourceVersion(); ok {
		_spec.SetField(leaderelect.FieldResourceVersion, field.TypeString, value)
		_node.ResourceVersion = value
	}
	if value, ok := lec.mutation.LeaseDurationSeconds(); ok {
		_spec.SetField(leaderelect.FieldLeaseDurationSeconds, field.TypeInt, value)
		_node.LeaseDurationSeconds = value
	}
	if value, ok := lec.mutation.AcquireTime(); ok {
		_spec.SetField(leaderelect.FieldAcquireTime, field.TypeInt64, value)
		_node.AcquireTime = value
	}
	if value, ok := lec.mutation.RenewTime(); ok {
		_spec.SetField(leaderelect.FieldRenewTime, field.TypeInt64, value)
		_node.RenewTime = value
	}
	if value, ok := lec.mutation.LeaderTransitions(); ok {
		_spec.SetField(leaderelect.FieldLeaderTransitions, field.TypeInt, value)
		_node.LeaderTransitions = value
	}
	if value, ok := lec.mutation.HolderIdentity(); ok {
		_spec.SetField(leaderelect.FieldHolderIdentity, field.TypeString, value)
		_node.HolderIdentity = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LeaderElect.Create().
//		SetResourceVersion(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LeaderElectUpsert) {
//			SetResourceVersion(v+v).
//		}).
//		Exec(ctx)
func (lec *LeaderElectCreate) OnConflict(opts ...sql.ConflictOption) *LeaderElectUpsertOne {
	lec.conflict = opts
	return &LeaderElectUpsertOne{
		create: lec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LeaderElect.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lec *LeaderElectCreate) OnConflictColumns(columns ...string) *LeaderElectUpsertOne {
	lec.conflict = append(lec.conflict, sql.ConflictColumns(columns...))
	return &LeaderElectUpsertOne{
		create: lec,
	}
}

type (
	// LeaderElectUpsertOne is the builder for "upsert"-ing
	//  one LeaderElect node.
	LeaderElectUpsertOne struct {
		create *LeaderElectCreate
	}

	// LeaderElectUpsert is the "OnConflict" setter.
	LeaderElectUpsert struct {
		*sql.UpdateSet
	}
)

// SetResourceVersion sets the "resource_version" field.
func (u *LeaderElectUpsert) SetResourceVersion(v string) *LeaderElectUpsert {
	u.Set(leaderelect.FieldResourceVersion, v)
	return u
}

// UpdateResourceVersion sets the "resource_version" field to the value that was provided on create.
func (u *LeaderElectUpsert) UpdateResourceVersion() *LeaderElectUpsert {
	u.SetExcluded(leaderelect.FieldResourceVersion)
	return u
}

// SetLeaseDurationSeconds sets the "lease_duration_seconds" field.
func (u *LeaderElectUpsert) SetLeaseDurationSeconds(v int) *LeaderElectUpsert {
	u.Set(leaderelect.FieldLeaseDurationSeconds, v)
	return u
}

// UpdateLeaseDurationSeconds sets the "lease_duration_seconds" field to the value that was provided on create.
func (u *LeaderElectUpsert) UpdateLeaseDurationSeconds() *LeaderElectUpsert {
	u.SetExcluded(leaderelect.FieldLeaseDurationSeconds)
	return u
}

// AddLeaseDurationSeconds adds v to the "lease_duration_seconds" field.
func (u *LeaderElectUpsert) AddLeaseDurationSeconds(v int) *LeaderElectUpsert {
	u.Add(leaderelect.FieldLeaseDurationSeconds, v)
	return u
}

// SetAcquireTime sets the "acquire_time" field.
func (u *LeaderElectUpsert) SetAcquireTime(v int64) *LeaderElectUpsert {
	u.Set(leaderelect.FieldAcquireTime, v)
	return u
}

// UpdateAcquireTime sets the "acquire_time" field to the value that was provided on create.
func (u *LeaderElectUpsert) UpdateAcquireTime() *LeaderElectUpsert {
	u.SetExcluded(leaderelect.FieldAcquireTime)
	return u
}

// AddAcquireTime adds v to the "acquire_time" field.
func (u *LeaderElectUpsert) AddAcquireTime(v int64) *LeaderElectUpsert {
	u.Add(leaderelect.FieldAcquireTime, v)
	return u
}

// SetRenewTime sets the "renew_time" field.
func (u *LeaderElectUpsert) SetRenewTime(v int64) *LeaderElectUpsert {
	u.Set(leaderelect.FieldRenewTime, v)
	return u
}

// UpdateRenewTime sets the "renew_time" field to the value that was provided on create.
func (u *LeaderElectUpsert) UpdateRenewTime() *LeaderElectUpsert {
	u.SetExcluded(leaderelect.FieldRenewTime)
	return u
}

// AddRenewTime adds v to the "renew_time" field.
func (u *LeaderElectUpsert) AddRenewTime(v int64) *LeaderElectUpsert {
	u.Add(leaderelect.FieldRenewTime, v)
	return u
}

// SetLeaderTransitions sets the "leader_transitions" field.
func (u *LeaderElectUpsert) SetLeaderTransitions(v int) *LeaderElectUpsert {
	u.Set(leaderelect.FieldLeaderTransitions, v)
	return u
}

// UpdateLeaderTransitions sets the "leader_transitions" field to the value that was provided on create.
func (u *LeaderElectUpsert) UpdateLeaderTransitions() *LeaderElectUpsert {
	u.SetExcluded(leaderelect.FieldLeaderTransitions)
	return u
}

// AddLeaderTransitions adds v to the "leader_transitions" field.
func (u *LeaderElectUpsert) AddLeaderTransitions(v int) *LeaderElectUpsert {
	u.Add(leaderelect.FieldLeaderTransitions, v)
	return u
}

// SetHolderIdentity sets the "holder_identity" field.
func (u *LeaderElectUpsert) SetHolderIdentity(v string) *LeaderElectUpsert {
	u.Set(leaderelect.FieldHolderIdentity, v)
	return u
}

// UpdateHolderIdentity sets the "holder_identity" field to the value that was provided on create.
func (u *LeaderElectUpsert) UpdateHolderIdentity() *LeaderElectUpsert {
	u.SetExcluded(leaderelect.FieldHolderIdentity)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.LeaderElect.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(leaderelect.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LeaderElectUpsertOne) UpdateNewValues() *LeaderElectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(leaderelect.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LeaderElect.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *LeaderElectUpsertOne) Ignore() *LeaderElectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LeaderElectUpsertOne) DoNothing() *LeaderElectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LeaderElectCreate.OnConflict
// documentation for more info.
func (u *LeaderElectUpsertOne) Update(set func(*LeaderElectUpsert)) *LeaderElectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LeaderElectUpsert{UpdateSet: update})
	}))
	return u
}

// SetResourceVersion sets the "resource_version" field.
func (u *LeaderElectUpsertOne) SetResourceVersion(v string) *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetResourceVersion(v)
	})
}

// UpdateResourceVersion sets the "resource_version" field to the value that was provided on create.
func (u *LeaderElectUpsertOne) UpdateResourceVersion() *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateResourceVersion()
	})
}

// SetLeaseDurationSeconds sets the "lease_duration_seconds" field.
func (u *LeaderElectUpsertOne) SetLeaseDurationSeconds(v int) *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetLeaseDurationSeconds(v)
	})
}

// AddLeaseDurationSeconds adds v to the "lease_duration_seconds" field.
func (u *LeaderElectUpsertOne) AddLeaseDurationSeconds(v int) *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.AddLeaseDurationSeconds(v)
	})
}

// UpdateLeaseDurationSeconds sets the "lease_duration_seconds" field to the value that was provided on create.
func (u *LeaderElectUpsertOne) UpdateLeaseDurationSeconds() *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateLeaseDurationSeconds()
	})
}

// SetAcquireTime sets the "acquire_time" field.
func (u *LeaderElectUpsertOne) SetAcquireTime(v int64) *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetAcquireTime(v)
	})
}

// AddAcquireTime adds v to the "acquire_time" field.
func (u *LeaderElectUpsertOne) AddAcquireTime(v int64) *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.AddAcquireTime(v)
	})
}

// UpdateAcquireTime sets the "acquire_time" field to the value that was provided on create.
func (u *LeaderElectUpsertOne) UpdateAcquireTime() *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateAcquireTime()
	})
}

// SetRenewTime sets the "renew_time" field.
func (u *LeaderElectUpsertOne) SetRenewTime(v int64) *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetRenewTime(v)
	})
}

// AddRenewTime adds v to the "renew_time" field.
func (u *LeaderElectUpsertOne) AddRenewTime(v int64) *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.AddRenewTime(v)
	})
}

// UpdateRenewTime sets the "renew_time" field to the value that was provided on create.
func (u *LeaderElectUpsertOne) UpdateRenewTime() *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateRenewTime()
	})
}

// SetLeaderTransitions sets the "leader_transitions" field.
func (u *LeaderElectUpsertOne) SetLeaderTransitions(v int) *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetLeaderTransitions(v)
	})
}

// AddLeaderTransitions adds v to the "leader_transitions" field.
func (u *LeaderElectUpsertOne) AddLeaderTransitions(v int) *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.AddLeaderTransitions(v)
	})
}

// UpdateLeaderTransitions sets the "leader_transitions" field to the value that was provided on create.
func (u *LeaderElectUpsertOne) UpdateLeaderTransitions() *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateLeaderTransitions()
	})
}

// SetHolderIdentity sets the "holder_identity" field.
func (u *LeaderElectUpsertOne) SetHolderIdentity(v string) *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetHolderIdentity(v)
	})
}

// UpdateHolderIdentity sets the "holder_identity" field to the value that was provided on create.
func (u *LeaderElectUpsertOne) UpdateHolderIdentity() *LeaderElectUpsertOne {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateHolderIdentity()
	})
}

// Exec executes the query.
func (u *LeaderElectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LeaderElectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LeaderElectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LeaderElectUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LeaderElectUpsertOne.ID is not supported by MySQL driver. Use LeaderElectUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LeaderElectUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LeaderElectCreateBulk is the builder for creating many LeaderElect entities in bulk.
type LeaderElectCreateBulk struct {
	config
	builders []*LeaderElectCreate
	conflict []sql.ConflictOption
}

// Save creates the LeaderElect entities in the database.
func (lecb *LeaderElectCreateBulk) Save(ctx context.Context) ([]*LeaderElect, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lecb.builders))
	nodes := make([]*LeaderElect, len(lecb.builders))
	mutators := make([]Mutator, len(lecb.builders))
	for i := range lecb.builders {
		func(i int, root context.Context) {
			builder := lecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LeaderElectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lecb *LeaderElectCreateBulk) SaveX(ctx context.Context) []*LeaderElect {
	v, err := lecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lecb *LeaderElectCreateBulk) Exec(ctx context.Context) error {
	_, err := lecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lecb *LeaderElectCreateBulk) ExecX(ctx context.Context) {
	if err := lecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.LeaderElect.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LeaderElectUpsert) {
//			SetResourceVersion(v+v).
//		}).
//		Exec(ctx)
func (lecb *LeaderElectCreateBulk) OnConflict(opts ...sql.ConflictOption) *LeaderElectUpsertBulk {
	lecb.conflict = opts
	return &LeaderElectUpsertBulk{
		create: lecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.LeaderElect.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (lecb *LeaderElectCreateBulk) OnConflictColumns(columns ...string) *LeaderElectUpsertBulk {
	lecb.conflict = append(lecb.conflict, sql.ConflictColumns(columns...))
	return &LeaderElectUpsertBulk{
		create: lecb,
	}
}

// LeaderElectUpsertBulk is the builder for "upsert"-ing
// a bulk of LeaderElect nodes.
type LeaderElectUpsertBulk struct {
	create *LeaderElectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.LeaderElect.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(leaderelect.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *LeaderElectUpsertBulk) UpdateNewValues() *LeaderElectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(leaderelect.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.LeaderElect.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *LeaderElectUpsertBulk) Ignore() *LeaderElectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LeaderElectUpsertBulk) DoNothing() *LeaderElectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LeaderElectCreateBulk.OnConflict
// documentation for more info.
func (u *LeaderElectUpsertBulk) Update(set func(*LeaderElectUpsert)) *LeaderElectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LeaderElectUpsert{UpdateSet: update})
	}))
	return u
}

// SetResourceVersion sets the "resource_version" field.
func (u *LeaderElectUpsertBulk) SetResourceVersion(v string) *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetResourceVersion(v)
	})
}

// UpdateResourceVersion sets the "resource_version" field to the value that was provided on create.
func (u *LeaderElectUpsertBulk) UpdateResourceVersion() *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateResourceVersion()
	})
}

// SetLeaseDurationSeconds sets the "lease_duration_seconds" field.
func (u *LeaderElectUpsertBulk) SetLeaseDurationSeconds(v int) *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetLeaseDurationSeconds(v)
	})
}

// AddLeaseDurationSeconds adds v to the "lease_duration_seconds" field.
func (u *LeaderElectUpsertBulk) AddLeaseDurationSeconds(v int) *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.AddLeaseDurationSeconds(v)
	})
}

// UpdateLeaseDurationSeconds sets the "lease_duration_seconds" field to the value that was provided on create.
func (u *LeaderElectUpsertBulk) UpdateLeaseDurationSeconds() *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateLeaseDurationSeconds()
	})
}

// SetAcquireTime sets the "acquire_time" field.
func (u *LeaderElectUpsertBulk) SetAcquireTime(v int64) *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetAcquireTime(v)
	})
}

// AddAcquireTime adds v to the "acquire_time" field.
func (u *LeaderElectUpsertBulk) AddAcquireTime(v int64) *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.AddAcquireTime(v)
	})
}

// UpdateAcquireTime sets the "acquire_time" field to the value that was provided on create.
func (u *LeaderElectUpsertBulk) UpdateAcquireTime() *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateAcquireTime()
	})
}

// SetRenewTime sets the "renew_time" field.
func (u *LeaderElectUpsertBulk) SetRenewTime(v int64) *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetRenewTime(v)
	})
}

// AddRenewTime adds v to the "renew_time" field.
func (u *LeaderElectUpsertBulk) AddRenewTime(v int64) *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.AddRenewTime(v)
	})
}

// UpdateRenewTime sets the "renew_time" field to the value that was provided on create.
func (u *LeaderElectUpsertBulk) UpdateRenewTime() *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateRenewTime()
	})
}

// SetLeaderTransitions sets the "leader_transitions" field.
func (u *LeaderElectUpsertBulk) SetLeaderTransitions(v int) *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetLeaderTransitions(v)
	})
}

// AddLeaderTransitions adds v to the "leader_transitions" field.
func (u *LeaderElectUpsertBulk) AddLeaderTransitions(v int) *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.AddLeaderTransitions(v)
	})
}

// UpdateLeaderTransitions sets the "leader_transitions" field to the value that was provided on create.
func (u *LeaderElectUpsertBulk) UpdateLeaderTransitions() *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateLeaderTransitions()
	})
}

// SetHolderIdentity sets the "holder_identity" field.
func (u *LeaderElectUpsertBulk) SetHolderIdentity(v string) *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.SetHolderIdentity(v)
	})
}

// UpdateHolderIdentity sets the "holder_identity" field to the value that was provided on create.
func (u *LeaderElectUpsertBulk) UpdateHolderIdentity() *LeaderElectUpsertBulk {
	return u.Update(func(s *LeaderElectUpsert) {
		s.UpdateHolderIdentity()
	})
}

// Exec executes the query.
func (u *LeaderElectUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LeaderElectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LeaderElectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LeaderElectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
